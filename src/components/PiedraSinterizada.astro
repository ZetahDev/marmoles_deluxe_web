---
import { listStonesFromS3, type Stone } from '../lib/utils/s3Utils';

// Define stone type structure
interface StoneType {
  title: "Neolith" | "Altea" | "Dekton" | "Silestone";
  folder: string;
}

// Define los tipos de piedra sinterizada
const stoneTypes: StoneType[] = [
  { title: "Neolith", folder: "PIEDRA+SINTERIZADA/NEOLITH" },
  { title: "Altea", folder: "PIEDRA+SINTERIZADA/ALTEA" },
  { title: "Dekton", folder: "PIEDRA+SINTERIZADA/DEKTON" },
  { title: "Silestone", folder: "PIEDRA+SINTERIZADA/SILESTONE" }
];

// Define characteristics by stone type
type FeatureMap = {
  [key in StoneType["title"]]: string[];
};

// Define características por tipo de piedra (solo las 6 más importantes)
const features: FeatureMap = {
  "Neolith": [
    "Resistente a la abrasión y al rayado",
    "Resistente a altas temperaturas",
    "Resistente a químicos, ácidos y solventes",
    "Baja absorción de líquidos",
    "Adecuado para manipular alimentos",
    "Puede usarse en interiores o exteriores",
    "25 años de garantía"
  ],
  "Altea": [
    "Resistente a la abrasión y al rayado",
    "Resistente a altas temperaturas",
    "Resistente a químicos, ácidos y solventes",
    "Baja absorción de líquidos",
    "Adecuado para manipular alimentos",
    "Puede usarse en interiores o exteriores",
    "10 años de garantía"
  ],
  "Dekton": [
    "Resistente a la abrasión y al rayado",
    "Resistente a altas temperaturas",
    "Resistente a químicos, ácidos y solventes",
    "Baja absorción de líquidos",
    "Adecuado para manipular alimentos",
    "Puede usarse en interiores o exteriores",
    "25 años de garantía"
  ],
  "Silestone": [
    "Resistente a la abrasión y al rayado",
    "Resistente a altas temperaturas",
    "25 años de garantía",
    "Resistente a químicos, ácidos y solventes",
    "Baja absorción de líquidos",
    "Adecuado para manipular alimentos",
    "Puede usarse en interiores o exteriores"
  ]
};

// Define category result structure
interface StoneCategory {
  title: StoneType["title"];
  stones: Stone[];
  features: string[];
}

// Fetch stone data for each category at build time
const stoneCategories: StoneCategory[] = await Promise.all(
  stoneTypes.map(async (type) => {
    const stones = await listStonesFromS3(type.folder);
    return {
      title: type.title,
      stones: stones,
      features: features[type.title]
    };
  })
);
---

<div class="container mx-auto px-4 py-16">
  {
    stoneCategories.map((category, index) => (
      <div>
        <h2 class={`text-3xl font-bold text-center ${index > 0 ? 'my-12' : 'mb-12'}`}>{category.title}</h2>
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8">
          {
            category.stones.map((stone) => (
              <div class="group relative overflow-hidden rounded-lg shadow-lg">
                <div class="relative h-64 overflow-hidden">
                  <img
                    src={stone.image}
                    alt={stone.name}
                    class="w-full h-full object-cover transition-transform duration-300 group-hover:scale-105"
                  />
                  <img
                    src={stone.design}
                    alt={`${stone.name} design`}
                    class="absolute inset-0 w-full h-full object-cover opacity-0 transition-opacity duration-300 group-hover:opacity-100"
                  />
                </div>
                <div class="absolute bottom-0 left-0 right-0 bg-black/70 text-white p-4 transform translate-y-full transition-transform duration-300 group-hover:translate-y-0">
                  <h3 class="text-lg font-semibold">{stone.name}</h3>
                </div>
              </div>
            ))
          }
        </div>
      </div>
    ))
  }
</div>

<!-- Mostrar características -->
<div class="container mx-auto px-4 py-16 mt-20">
  <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-12">
    {
      stoneCategories.map((category) => (
        <div>
          <h3 class="text-2xl font-bold mb-6 text-center">{category.title}</h3>
          <ul class="space-y-2">
            {category.features.map((feature: string) => (
              <li class="flex items-center">
                <svg class="w-5 h-5 text-green-500 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                </svg>
                {feature}
              </li>
            ))}
          </ul>
        </div>
      ))
    }
  </div>
</div> 